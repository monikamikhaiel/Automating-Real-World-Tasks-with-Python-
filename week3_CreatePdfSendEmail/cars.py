#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import operator

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.
  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  top_model={"total_sales":0}
  pop_year={}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    # TODO: also handle most popular car_year
    itemsales =top_model["total_sales"]
    if itemsales < item["total_sales"]:
      top_model=item
### year and total sales
    item["year"]=format_car(item["car"]).split()[-1]
    if not item["year"] in pop_year:
      pop_year[item["year"]]=item["total_sales"]
    else:
      pop_year[item["year"]]+=item["total_sales"]
#  print(pop_year)
#  pop_year_sort=sorted(pop_year.items(), key=operator.itemgetter(1),reverse=True)
 # print(pop_year_sort)
 # year=next(iter(pop_year_sort))
  #sales=pop_year_sort[0]
  
  popular_car_year = max(pop_year.items(), key=operator.itemgetter(1))
  year, sales = popular_car_year
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
   "The {} had the most sales:{}".format(
      format_car(top_model["car"]).split()[1],top_model["total_sales"]),
  "The most popular year was {} with {} sales".format(year,sales)]
  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data



def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  #print(data)
  #print(sorted(data, key=lambda o:o["total_sales"],reverse=True))
  # TODO: turn this into a PDF report
  labels=[]
  data_=[]
  for item in data:
    labels.append(format_car(item["car"].split("(")[0]))
    data_.append(item["total_sales"])

  reports.generate("/tmp/cars.pdf","Sales summary for lat month",summary[0]+"<br/>"+
  summary[1]+ "<br/>"+summary[2],
#  additional_info = "<br/>".join(summary)
  cars_dict_to_table(sorted(data, key=lambda o:o["total_sales"],reverse=True))
  ,data_,labels)
  # TODO: send the PDF report as an email attachment
  m=emails.generate("automation@example.com","@example.com"
    ,"Sales summary for last month",summary[0]+"\n"+
  summary[1]+"\n"+summary[2],"/tmp/cars.pdf")
  emails.send(m)
 # print(m)
if _name_ == "_main_":
  main(sys.argv)
